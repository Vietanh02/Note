1. Socket Creation
using sys/socket.h header
syntax: int socket(int domain,int type,int protocol)
    domain: address family over which the communication will be performed
            value:  present in sys/socket.h
                    3 option:   AF_LOCAL or AF_UNIX: local communication, client and sserver in same node. UNIX domain socket
                                AF_INET: IPv4 address
                                AF_INET6: IPv6 address
                                AF_BLUETOOTH: low-level Bluetooth connection
    type:   type communication used in socket
            2 options:  SOCK_STREAM: uses TCP
                        SOCK_DGRAM: uses UDP
    protocol:   protocol used in socket.
                represented by a number: 0->2^10
socket() create a socket and return a file description which represent and open file that will be utilized by the socket in reading and writing operations and the file descriptor is used to represent the socket in later stages. Incase of err in create socket it  will return -1

2. Setsocket
used to specify some options for the socket to control the behavior of the socket.
syntax: int setsocketopt(int socket_descriptor, int level,int option_name,const void* value_of_option, socklen_t option_length)
    socket_descriptor: file descriptor returned by socket() function
    level: represent the level at which option socket applied
            value:  SOL_SOCKET
                    IPPROTO_TCP: TCP level
    option_name:    rules or option modified for the socket
                    value:  SO_DEBUG: enable the recording of debugging information
                            SO_REUSEADDR: enable reusing of local address in the bind() function
                            SO_SNDBUF is used to set the maximum buffer size 
    value_of_option: specify the value for the options set in option_name
    option_length: lenght of variable used to set the option value
return: 0: success
        -1: failure
3. Bind 
used to assign an address to a socket created using the socket() function.
syntax: int bind(int socket_descriptor,constt struct sockaddr *address,socklen_t length_of_address)
    socket_descriptor: value return by the socket() function
    address: structure of type sockaddr.
                usually use a structure of type sockaddr_in
                sockaddr_in is cast to sockaddr data type when call bind()
    length_of_address: size of the address passed as the second parameter
return: 0: success
        -1: failure
4.Listen
make the server node wait and listen connection froom client node on the port and address specifide by bind()
syntax: int listen(int socket_descriptor, int back_log)
    socket_descriptor: value of the file descriptor return by socket()
    back_log: marks the maximum number of connection requests can be made at one time.
                number of requests made after the number specified by back_log may cause err or will br ignored by the server if the options for retransmission are set
return: 0: success and are listening
        -1: failure
5. Accept
establish a connection between the server and the client nodes for transfer of data
syntax: int accept(int socket_descriptor, struct sockaddr *restrict address, socklen_t *restrict length_of_address)
    socket_descriptor: value of the file descriptor return by socket()
    address: variable of the sockaddr_in structure, addressof the socket returned from the function will be stored
    length_of_address: size of address parameter
cread a new socket from the first connection requests for the specified socket_descriptor and return file descriptor of the new socket.
the file descriptor of new socket is used in the read() and write() functionto send and receive data form the client node

6. Connect 
send the connection request and connect to the server node
syntax: int connect(int socket_descriptor,const struct sockaddr *address, socklen_t length_of_address)
    socket_descriptor: value of the file descriptor return by socket()
    address: variable of the sockaddr_in structure, addressof the socket returned from the function will be stored
    length_of_address: size of address parameter
return: 0: success
        -1: err